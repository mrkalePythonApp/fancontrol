; All the values enclosed in sharp parentheses, mostly credentials, should be
; replaced with your real data.
[DEFAULT]
; MQTT seed topics
; Each topic can be considered as a logical group of topics. With added
; trailing '/#' it can be used as a topic filter.
mqtt_topic_server = server
;
mqtt_topic_fan = %(mqtt_topic_server)s/fan
mqtt_topic_fan_status = %(mqtt_topic_fan)s/state
mqtt_topic_fan_command = %(mqtt_topic_fan)s/cmd

[MQTTbroker]
; Hardcoded default - the hostname
clientid = <mqtt_clientid>
; Hardcoded default - localhost
host = localhost
; Hardcoded default - 1883
port = 1883
; Registered user for logging to MQTT broker
username = <mqtt_username>
; Password of MQTT registered user
password = <mqtt_password>
; Userdata for MQTT callback functions
;userdata = dummy

[MQTTfilters]
; Topics with wildcards aimed for topic filtering
; Usually only to these wildcard topics a client subscribes. Single topics
; are utilized for comparing and selecting only.
; topic = topicName, topicQos
; Examples:
; fan_dummy = %(mqtt_topic_fan)s/dummy/#, 1
; fan_dummy = %(mqtt_topic_fan)s/dummy/+/something/#, 2
filter_fan =  %(mqtt_topic_fan_command)s/#

[MQTTtopics]
; Theese single topics are utilized for publishing and in callbacks
; for comparing and selecting.
; topic = topicName, topicQos
; Example:
; fan_dummy = %(mqtt_topic_fan)s/dummy, 1
lwt = %(mqtt_topic_fan_status)s, 0, 1
; Topics for cooling fan
fan_status_percon = %(mqtt_topic_fan_status)s/perc/on
fan_status_percoff = %(mqtt_topic_fan_status)s/perc/off
fan_status_tempon = %(mqtt_topic_fan_status)s/temp/on
fan_status_tempoff = %(mqtt_topic_fan_status)s/temp/off
fan_command_percon = %(mqtt_topic_fan_command)s/perc/on
fan_command_percoff = %(mqtt_topic_fan_command)s/perc/off
fan_command_tempon = %(mqtt_topic_fan_command)s/temp/on
fan_command_tempoff = %(mqtt_topic_fan_command)s/temp/off

[Timers]
; Period in seconds for testing connection and attempting to reconnect
; to a MQTT broker.
; Hardcoded default 15.0s, hardcoded valid range 5 ~ 180s
period_mqtt = 30.0
; Period in seconds for checking SoC temperature and controlling fan accordingly
; Hardcoded default 5.0s, hardcoded valid range 1 ~ 60s
period_fan = 5.0

[Fan]
; Parameters of cooling fan control
; Control pin pyA20 port or connector name
pin_name = PA13
; LED pyA20 port or connector name signaling running fan
; [STATUS_LED, POWER_LED] - not used currently
; pin_led_name = POWER_LED ; Green LED
; pin_led_name = STATUS_LED ; Red LED
; Percentage of maximal temperature for turning fan on
; Hardcoded default 90%, valid range 80.0 ~ 95.0% limited in code
percentage_on = 93
; Percentage of maximal temperature for turning fan off.
; Hardcoded default 60%, valid range 50.0 ~ 75.0% limited in code
; Should be sufficiently lower then turning on percentage in order to achieve
; proper hysteresis.
percentage_off = 66
